###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         05/Feb/2021  13:28:09
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  E:\cpp\nrf52_libraries\timer\timer.cpp
#    Command line =
#        -f C:\Users\IF385~1.SHO\AppData\Local\Temp\EWE55B.tmp
#        (E:\cpp\nrf52_libraries\timer\timer.cpp -D NRF52840_XXAA -D
#        CONFIG_NFCT_PINS_AS_GPIOS -D _AUDIOGUDE_V2_BOARD -D DEBUG -lCN
#        E:\cpp\nrf52_libraries\main\List -lA E:\cpp\nrf52_libraries\main\List
#        -o E:\cpp\nrf52_libraries\main\Obj --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I E:\cpp\nrf52_libraries\fsm\ -I
#        E:\cpp\nrf52_libraries\pwm\ -I E:\cpp\nrf52_libraries\spi\ -I
#        E:\cpp\nrf52_libraries\usb\ -I E:\cpp\nrf52_libraries\main\ -I
#        E:\cpp\nrf52_libraries\cmsis\ -I E:\cpp\nrf52_libraries\cmsis\device\
#        -I E:\cpp\nrf52_libraries\cmsis\include\ -I
#        E:\cpp\nrf52_libraries\board\ -I E:\cpp\nrf52_libraries\utils\ -I
#        E:\cpp\nrf52_libraries\timer\ -I E:\cpp\nrf52_libraries\adc\ -On --c++
#        --no_exceptions --no_rtti)
#    Locale       =  C
#    List file    =  E:\cpp\nrf52_libraries\main\List\timer.lst
#    Object file  =  E:\cpp\nrf52_libraries\main\Obj\timer.o
#
###############################################################################

E:\cpp\nrf52_libraries\timer\timer.cpp
      1          #include "Timer.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     _ZN30_INTERNAL_9_timer_cpp_4e19ece914NVIC_EnableIRQE9IRQn_Type: (+1)
   \        0x0   0x2201             MOVS     R2,#+1
   \        0x2   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0x6   0x408A             LSLS     R2,R2,R1
   \        0x8   0x....'....        LDR.W    R1,??DataTable8_1  ;; 0xe000e100
   \        0xC   0x0003             MOVS     R3,R0
   \        0xE   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \       0x10   0x095B             LSRS     R3,R3,#+5
   \       0x12   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \       0x16   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_ClearPendingIRQ(IRQn_Type)
   \                     _ZN30_INTERNAL_9_timer_cpp_4e19ece920NVIC_ClearPendingIRQE9IRQn_Type: (+1)
   \        0x0   0x2201             MOVS     R2,#+1
   \        0x2   0xF010 0x011F      ANDS     R1,R0,#0x1F
   \        0x6   0x408A             LSLS     R2,R2,R1
   \        0x8   0x....'....        LDR.W    R1,??DataTable8_2  ;; 0xe000e280
   \        0xC   0x0003             MOVS     R3,R0
   \        0xE   0xB25B             SXTB     R3,R3            ;; SignExt  R3,R3,#+24,#+24
   \       0x10   0x095B             LSRS     R3,R3,#+5
   \       0x12   0xF841 0x2023      STR      R2,[R1, R3, LSL #+2]
   \       0x16   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPriority(IRQn_Type, uint32_t)
   \                     _ZN30_INTERNAL_9_timer_cpp_4e19ece916NVIC_SetPriorityE9IRQn_Typej: (+1)
   \        0x0   0xB410             PUSH     {R4}
   \        0x2   0x0002             MOVS     R2,R0
   \        0x4   0xB252             SXTB     R2,R2            ;; SignExt  R2,R2,#+24,#+24
   \        0x6   0x2A00             CMP      R2,#+0
   \        0x8   0xD50A             BPL.N    ??NVIC_SetPriority_0
   \        0xA   0x014A             LSLS     R2,R1,#+5
   \        0xC   0x....'....        LDR.W    R3,??DataTable8_3  ;; 0xe000ed18
   \       0x10   0x0004             MOVS     R4,R0
   \       0x12   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \       0x14   0xF014 0x040F      ANDS     R4,R4,#0xF
   \       0x18   0x4423             ADD      R3,R3,R4
   \       0x1A   0xF803 0x2C04      STRB     R2,[R3, #-4]
   \       0x1E   0xE005             B.N      ??NVIC_SetPriority_1
   \                     ??NVIC_SetPriority_0: (+1)
   \       0x20   0x014A             LSLS     R2,R1,#+5
   \       0x22   0x....'....        LDR.W    R3,??DataTable8_4  ;; 0xe000e400
   \       0x26   0x0004             MOVS     R4,R0
   \       0x28   0xB264             SXTB     R4,R4            ;; SignExt  R4,R4,#+24,#+24
   \       0x2A   0x551A             STRB     R2,[R3, R4]
   \                     ??NVIC_SetPriority_1: (+1)
   \       0x2C   0xBC10             POP      {R4}
   \       0x2E   0x4770             BX       LR               ;; return
      2          #include "led_driver.h"
      3          #include "PowerControl.h"

   \                                 In section .text, align 4
   \   __interwork __softfp void ADC<6>::enable()
   \                     _ZN3ADCILi6EE6enableEv: (+1)
   \        0x0   0x2101             MOVS     R1,#+1
   \        0x2   0x4A01             LDR.N    R2,??enable_0    ;; 0x40007500
   \        0x4   0x6011             STR      R1,[R2, #+0]
   \        0x6   0x4770             BX       LR               ;; return
   \                     ??enable_0:
   \        0x8   0x4000'7500        DC32     0x40007500

   \                                 In section .text, align 4
   \   __interwork __softfp void ADC<6>::init()
   \                     _ZN3ADCILi6EE4initEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x....'....        BL       _ZN3ADCILi6EE6enableEv
   \        0xA   0x2100             MOVS     R1,#+0
   \                     ??init_1: (+1)
   \        0xC   0x0008             MOVS     R0,R1
   \        0xE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x10   0x2806             CMP      R0,#+6
   \       0x12   0xDA0B             BGE.N    ??init_2
   \       0x14   0x000A             MOVS     R2,R1
   \       0x16   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x18   0x2018             MOVS     R0,#+24
   \       0x1A   0x4342             MULS     R2,R0,R2
   \       0x1C   0x5CA0             LDRB     R0,[R4, R2]
   \       0x1E   0x4A27             LDR.N    R2,??init_0      ;; 0x40007510
   \       0x20   0x000B             MOVS     R3,R1
   \       0x22   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x24   0x011B             LSLS     R3,R3,#+4
   \       0x26   0x50D0             STR      R0,[R2, R3]
   \       0x28   0x1C49             ADDS     R1,R1,#+1
   \       0x2A   0xE7EF             B.N      ??init_1
   \                     ??init_2: (+1)
   \       0x2C   0x2100             MOVS     R1,#+0
   \                     ??init_3: (+1)
   \       0x2E   0x0008             MOVS     R0,R1
   \       0x30   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x32   0x2806             CMP      R0,#+6
   \       0x34   0xDA25             BGE.N    ??init_4
   \       0x36   0x0008             MOVS     R0,R1
   \       0x38   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x3A   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \       0x3E   0xF890 0x0092      LDRB     R0,[R0, #+146]
   \       0x42   0x000A             MOVS     R2,R1
   \       0x44   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x46   0xEB04 0x0282      ADD      R2,R4,R2, LSL #+2
   \       0x4A   0xF892 0x2093      LDRB     R2,[R2, #+147]
   \       0x4E   0x0312             LSLS     R2,R2,#+12
   \       0x50   0xEA52 0x4200      ORRS     R2,R2,R0, LSL #+16
   \       0x54   0x0008             MOVS     R0,R1
   \       0x56   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x58   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \       0x5C   0xF890 0x0090      LDRB     R0,[R0, #+144]
   \       0x60   0xEA52 0x2200      ORRS     R2,R2,R0, LSL #+8
   \       0x64   0x0008             MOVS     R0,R1
   \       0x66   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x68   0xEB04 0x0080      ADD      R0,R4,R0, LSL #+2
   \       0x6C   0xF890 0x0091      LDRB     R0,[R0, #+145]
   \       0x70   0x4302             ORRS     R2,R0,R2
   \       0x72   0x4812             LDR.N    R0,??init_0      ;; 0x40007510
   \       0x74   0x000B             MOVS     R3,R1
   \       0x76   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x78   0x011B             LSLS     R3,R3,#+4
   \       0x7A   0x4418             ADD      R0,R0,R3
   \       0x7C   0x6082             STR      R2,[R0, #+8]
   \       0x7E   0x1C49             ADDS     R1,R1,#+1
   \       0x80   0xE7D5             B.N      ??init_3
   \                     ??init_4: (+1)
   \       0x82   0xF114 0x00A8      ADDS     R0,R4,#+168
   \       0x86   0x490E             LDR.N    R1,??init_0+0x4  ;; 0x4000762c
   \       0x88   0x6008             STR      R0,[R1, #+0]
   \       0x8A   0x2006             MOVS     R0,#+6
   \       0x8C   0x490D             LDR.N    R1,??init_0+0x8  ;; 0x40007630
   \       0x8E   0x6008             STR      R0,[R1, #+0]
   \       0x90   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \       0x94   0x490C             LDR.N    R1,??init_0+0xC  ;; 0x400075f0
   \       0x96   0x6008             STR      R0,[R1, #+0]
   \       0x98   0x490C             LDR.N    R1,??init_0+0x10  ;; 0x40007110
   \       0x9A   0x2000             MOVS     R0,#+0
   \       0x9C   0x6008             STR      R0,[R1, #+0]
   \       0x9E   0x2001             MOVS     R0,#+1
   \       0xA0   0x4A0B             LDR.N    R2,??init_0+0x14  ;; 0x4000700c
   \       0xA2   0x6010             STR      R0,[R2, #+0]
   \                     ??init_5: (+1)
   \       0xA4   0x6808             LDR      R0,[R1, #+0]
   \       0xA6   0x2800             CMP      R0,#+0
   \       0xA8   0xD0FC             BEQ.N    ??init_5
   \       0xAA   0x2150             MOVS     R1,#+80
   \       0xAC   0x4809             LDR.N    R0,??init_0+0x18
   \       0xAE   0x....'....        BL       _ZN5Timer8delay_usEj
   \       0xB2   0x2107             MOVS     R1,#+7
   \       0xB4   0x0020             MOVS     R0,R4
   \       0xB6   0x....'....        BL       _ZN3ADCILi6EE20setConvertionEND_IRQEh
   \       0xBA   0xBD10             POP      {R4,PC}          ;; return
   \                     ??init_0:
   \       0xBC   0x4000'7510        DC32     0x40007510
   \       0xC0   0x4000'762C        DC32     0x4000762c
   \       0xC4   0x4000'7630        DC32     0x40007630
   \       0xC8   0x4000'75F0        DC32     0x400075f0
   \       0xCC   0x4000'7110        DC32     0x40007110
   \       0xD0   0x4000'700C        DC32     0x4000700c
   \       0xD4   0x....'....        DC32     sys_timer

   \                                 In section .text, align 4
   \   __interwork __softfp void ADC<6>::measure()
   \                     _ZN3ADCILi6EE7measureEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x0020             MOVS     R0,R4
   \        0x6   0x....'....        BL       _ZN3ADCILi6EE4initEv
   \        0xA   0x4906             LDR.N    R1,??measure_0   ;; 0x40007100
   \        0xC   0x2000             MOVS     R0,#+0
   \        0xE   0x6008             STR      R0,[R1, #+0]
   \       0x10   0x2001             MOVS     R0,#+1
   \       0x12   0x4A05             LDR.N    R2,??measure_0+0x4  ;; 0x40007000
   \       0x14   0x6010             STR      R0,[R2, #+0]
   \                     ??measure_1: (+1)
   \       0x16   0x6808             LDR      R0,[R1, #+0]
   \       0x18   0x2800             CMP      R0,#+0
   \       0x1A   0xD0FC             BEQ.N    ??measure_1
   \       0x1C   0x2001             MOVS     R0,#+1
   \       0x1E   0x4903             LDR.N    R1,??measure_0+0x8  ;; 0x40007004
   \       0x20   0x6008             STR      R0,[R1, #+0]
   \       0x22   0xBD10             POP      {R4,PC}          ;; return
   \                     ??measure_0:
   \       0x24   0x4000'7100        DC32     0x40007100
   \       0x28   0x4000'7000        DC32     0x40007000
   \       0x2C   0x4000'7004        DC32     0x40007004

   \                                 In section .text, align 4
   \   __interwork __softfp void ADC<6>::setConvertionEND_IRQ(uint8_t)
   \                     _ZN3ADCILi6EE20setConvertionEND_IRQEh: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0xF05F 0x30FF      MOVS     R0,#-1
   \        0xA   0x490D             LDR.N    R1,??setConvertionEND_IRQ_0  ;; 0x40007308
   \        0xC   0x6008             STR      R0,[R1, #+0]
   \        0xE   0x2002             MOVS     R0,#+2
   \       0x10   0x490C             LDR.N    R1,??setConvertionEND_IRQ_0+0x4  ;; 0x40007300
   \       0x12   0x6008             STR      R0,[R1, #+0]
   \       0x14   0x2001             MOVS     R0,#+1
   \       0x16   0x490C             LDR.N    R1,??setConvertionEND_IRQ_0+0x8  ;; 0x40007304
   \       0x18   0x6008             STR      R0,[R1, #+0]
   \       0x1A   0x2000             MOVS     R0,#+0
   \       0x1C   0x490B             LDR.N    R1,??setConvertionEND_IRQ_0+0xC  ;; 0x40007100
   \       0x1E   0x6008             STR      R0,[R1, #+0]
   \       0x20   0x2000             MOVS     R0,#+0
   \       0x22   0x490B             LDR.N    R1,??setConvertionEND_IRQ_0+0x10  ;; 0x40007104
   \       0x24   0x6008             STR      R0,[R1, #+0]
   \       0x26   0x0029             MOVS     R1,R5
   \       0x28   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x2A   0x2007             MOVS     R0,#+7
   \       0x2C   0x....'....        BL       _ZN30_INTERNAL_9_timer_cpp_4e19ece916NVIC_SetPriorityE9IRQn_Typej
   \       0x30   0x2007             MOVS     R0,#+7
   \       0x32   0x....'....        BL       _ZN30_INTERNAL_9_timer_cpp_4e19ece920NVIC_ClearPendingIRQE9IRQn_Type
   \       0x36   0x2007             MOVS     R0,#+7
   \       0x38   0x....'....        BL       _ZN30_INTERNAL_9_timer_cpp_4e19ece914NVIC_EnableIRQE9IRQn_Type
   \       0x3C   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   \       0x3E   0xBF00             Nop      
   \                     ??setConvertionEND_IRQ_0:
   \       0x40   0x4000'7308        DC32     0x40007308
   \       0x44   0x4000'7300        DC32     0x40007300
   \       0x48   0x4000'7304        DC32     0x40007304
   \       0x4C   0x4000'7100        DC32     0x40007100
   \       0x50   0x4000'7104        DC32     0x40007104
      4          #include "ADC.h"
      5          

   \                                 In section .text, align 2, keep-with-next
   \   __code __interwork __softfp Timer::subobject Timer(uint8_t)
   \                     _ZN5TimerC2Eh: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \        0x6   0x0020             MOVS     R0,R4
   \        0x8   0x....'....        BL       _ZN5TimerC1Eh
   \        0xC   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
      6          Timer::Timer(uint8_t tmr_num)
      7          {
   \                     _ZN5TimerC1Eh: (+1)
   \        0x0   0x2200             MOVS     R2,#+0
   \        0x2   0x6082             STR      R2,[R0, #+8]
   \        0x4   0x2200             MOVS     R2,#+0
   \        0x6   0x2300             MOVS     R3,#+0
   \        0x8   0xE9C0 0x2304      STRD     R2,R3,[R0, #+16]
   \        0xC   0x2201             MOVS     R2,#+1
   \        0xE   0x7602             STRB     R2,[R0, #+24]
      8              switch(tmr_num)
   \       0x10   0x000A             MOVS     R2,R1
   \       0x12   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x14   0x2A00             CMP      R2,#+0
   \       0x16   0xD006             BEQ.N    ??Timer_0
   \       0x18   0x2A02             CMP      R2,#+2
   \       0x1A   0xD010             BEQ.N    ??Timer_1
   \       0x1C   0xD309             BCC.N    ??Timer_2
   \       0x1E   0x2A04             CMP      R2,#+4
   \       0x20   0xD019             BEQ.N    ??Timer_3
   \       0x22   0xD312             BCC.N    ??Timer_4
   \       0x24   0xE01D             B.N      ??Timer_5
      9              {        
     10                  case 0:
     11                      _TIMER = NRF_TIMER0;
   \                     ??Timer_0: (+1)
   \       0x26   0x....'....        LDR.W    R2,??DataTable8_5  ;; 0x40008000
   \       0x2A   0x6002             STR      R2,[R0, #+0]
     12                      _IRQn = TIMER0_IRQn;
   \       0x2C   0x2208             MOVS     R2,#+8
   \       0x2E   0x7102             STRB     R2,[R0, #+4]
     13                      break;
   \       0x30   0xE019             B.N      ??Timer_6
     14                  case 1:
     15                      _TIMER = NRF_TIMER1;
   \                     ??Timer_2: (+1)
   \       0x32   0x....'....        LDR.W    R2,??DataTable8_6  ;; 0x40009000
   \       0x36   0x6002             STR      R2,[R0, #+0]
     16                      _IRQn = TIMER1_IRQn;
   \       0x38   0x2209             MOVS     R2,#+9
   \       0x3A   0x7102             STRB     R2,[R0, #+4]
     17                      break;
   \       0x3C   0xE013             B.N      ??Timer_6
     18                  case 2:
     19                      _TIMER = NRF_TIMER2;
   \                     ??Timer_1: (+1)
   \       0x3E   0x....'....        LDR.W    R2,??DataTable8_7  ;; 0x4000a000
   \       0x42   0x6002             STR      R2,[R0, #+0]
     20                      _IRQn = TIMER2_IRQn;
   \       0x44   0x220A             MOVS     R2,#+10
   \       0x46   0x7102             STRB     R2,[R0, #+4]
     21                      break;
   \       0x48   0xE00D             B.N      ??Timer_6
     22                  case 3:
     23                      _TIMER = NRF_TIMER3;
   \                     ??Timer_4: (+1)
   \       0x4A   0x....'....        LDR.W    R2,??DataTable8_8  ;; 0x4001a000
   \       0x4E   0x6002             STR      R2,[R0, #+0]
     24                      _IRQn = TIMER3_IRQn;
   \       0x50   0x221A             MOVS     R2,#+26
   \       0x52   0x7102             STRB     R2,[R0, #+4]
     25                      break;
   \       0x54   0xE007             B.N      ??Timer_6
     26                  case 4:
     27                      _TIMER = NRF_TIMER4;
   \                     ??Timer_3: (+1)
   \       0x56   0x....'....        LDR.W    R2,??DataTable8_9  ;; 0x4001b000
   \       0x5A   0x6002             STR      R2,[R0, #+0]
     28                      _IRQn = TIMER4_IRQn;
   \       0x5C   0x221B             MOVS     R2,#+27
   \       0x5E   0x7102             STRB     R2,[R0, #+4]
     29                      break;
   \       0x60   0xE001             B.N      ??Timer_6
     30                  default:
     31                       _TIMER = nullptr;
   \                     ??Timer_5: (+1)
   \       0x62   0x2200             MOVS     R2,#+0
   \       0x64   0x6002             STR      R2,[R0, #+0]
     32                      break;
     33              }
     34          }
   \                     ??Timer_6: (+1)
   \       0x66   0x4770             BX       LR               ;; return
     35          

   \                                 In section .text, align 2, keep-with-next
     36          void    Timer::init(uint32_t presc, uint32_t compare_val, bool circulary)
     37          {
   \                     _ZN5Timer4initEjjb: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
   \        0x8   0x001F             MOVS     R7,R3
     38              _TIMER->MODE = TIMER_MODE_MODE_Timer << TIMER_MODE_MODE_Pos;
   \        0xA   0x2000             MOVS     R0,#+0
   \        0xC   0x6821             LDR      R1,[R4, #+0]
   \        0xE   0xF8C1 0x0504      STR      R0,[R1, #+1284]
     39              _TIMER->BITMODE = TIMER_BITMODE_BITMODE_24Bit << TIMER_BITMODE_BITMODE_Pos;
   \       0x12   0x2002             MOVS     R0,#+2
   \       0x14   0x6821             LDR      R1,[R4, #+0]
   \       0x16   0xF8C1 0x0508      STR      R0,[R1, #+1288]
     40          
     41              _TIMER->PRESCALER = presc << TIMER_PRESCALER_PRESCALER_Pos;
   \       0x1A   0x6820             LDR      R0,[R4, #+0]
   \       0x1C   0xF8C0 0x5510      STR      R5,[R0, #+1296]
     42              setCaptureCompare(0, compare_val, circulary);
   \       0x20   0x003B             MOVS     R3,R7
   \       0x22   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x24   0x0032             MOVS     R2,R6
   \       0x26   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \       0x28   0x2100             MOVS     R1,#+0
   \       0x2A   0x0020             MOVS     R0,R4
   \       0x2C   0x....'....        BL       _ZN5Timer17setCaptureCompareEhhb
     43          
     44              resume();
   \       0x30   0x0020             MOVS     R0,R4
   \       0x32   0x....'....        BL       _ZN5Timer6resumeEv
     45          }
   \       0x36   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
     46          
     47           // cc_num:0..5, priority 0..7

   \                                 In section .text, align 2, keep-with-next
     48          void Timer::setIRQ(uint8_t cc_num, uint8_t priority)  
     49          { 
   \                     _ZN5Timer6setIRQEhh: (+1)
   \        0x0   0xB570             PUSH     {R4-R6,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
   \        0x6   0x0016             MOVS     R6,R2
     50              switch(cc_num)
   \        0x8   0x0028             MOVS     R0,R5
   \        0xA   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \        0xC   0x2800             CMP      R0,#+0
   \        0xE   0xD008             BEQ.N    ??setIRQ_0
   \       0x10   0x2802             CMP      R0,#+2
   \       0x12   0xD018             BEQ.N    ??setIRQ_1
   \       0x14   0xD30E             BCC.N    ??setIRQ_2
   \       0x16   0x2804             CMP      R0,#+4
   \       0x18   0xD027             BEQ.N    ??setIRQ_3
   \       0x1A   0xD31D             BCC.N    ??setIRQ_4
   \       0x1C   0x2805             CMP      R0,#+5
   \       0x1E   0xD02D             BEQ.N    ??setIRQ_5
   \       0x20   0xE035             B.N      ??setIRQ_6
     51              {
     52                  case 0:
     53                      _TIMER->INTENSET |= TIMER_INTENSET_COMPARE0_Enabled << TIMER_INTENSET_COMPARE0_Pos;
   \                     ??setIRQ_0: (+1)
   \       0x22   0x6820             LDR      R0,[R4, #+0]
   \       0x24   0xF8D0 0x0304      LDR      R0,[R0, #+772]
   \       0x28   0xF450 0x3080      ORRS     R0,R0,#0x10000
   \       0x2C   0x6821             LDR      R1,[R4, #+0]
   \       0x2E   0xF8C1 0x0304      STR      R0,[R1, #+772]
     54                      break;
   \       0x32   0xE02C             B.N      ??setIRQ_7
     55                  case 1:
     56                      _TIMER->INTENSET |= TIMER_INTENSET_COMPARE1_Enabled << TIMER_INTENSET_COMPARE1_Pos;
   \                     ??setIRQ_2: (+1)
   \       0x34   0x6820             LDR      R0,[R4, #+0]
   \       0x36   0xF8D0 0x0304      LDR      R0,[R0, #+772]
   \       0x3A   0xF450 0x3000      ORRS     R0,R0,#0x20000
   \       0x3E   0x6821             LDR      R1,[R4, #+0]
   \       0x40   0xF8C1 0x0304      STR      R0,[R1, #+772]
     57                      break;
   \       0x44   0xE023             B.N      ??setIRQ_7
     58                  case 2:
     59                      _TIMER->INTENSET |= TIMER_INTENSET_COMPARE2_Enabled << TIMER_INTENSET_COMPARE2_Pos;
   \                     ??setIRQ_1: (+1)
   \       0x46   0x6820             LDR      R0,[R4, #+0]
   \       0x48   0xF8D0 0x0304      LDR      R0,[R0, #+772]
   \       0x4C   0xF450 0x2080      ORRS     R0,R0,#0x40000
   \       0x50   0x6821             LDR      R1,[R4, #+0]
   \       0x52   0xF8C1 0x0304      STR      R0,[R1, #+772]
     60                      break;
   \       0x56   0xE01A             B.N      ??setIRQ_7
     61                  case 3:
     62                      _TIMER->INTENSET |= TIMER_INTENSET_COMPARE3_Enabled << TIMER_INTENSET_COMPARE3_Pos;
   \                     ??setIRQ_4: (+1)
   \       0x58   0x6820             LDR      R0,[R4, #+0]
   \       0x5A   0xF8D0 0x0304      LDR      R0,[R0, #+772]
   \       0x5E   0xF450 0x2000      ORRS     R0,R0,#0x80000
   \       0x62   0x6821             LDR      R1,[R4, #+0]
   \       0x64   0xF8C1 0x0304      STR      R0,[R1, #+772]
     63                      break;
   \       0x68   0xE011             B.N      ??setIRQ_7
     64                  case 4:
     65                      _TIMER->INTENSET |= TIMER_INTENSET_COMPARE4_Enabled << TIMER_INTENSET_COMPARE4_Pos;
   \                     ??setIRQ_3: (+1)
   \       0x6A   0x6820             LDR      R0,[R4, #+0]
   \       0x6C   0xF8D0 0x0304      LDR      R0,[R0, #+772]
   \       0x70   0xF450 0x1080      ORRS     R0,R0,#0x100000
   \       0x74   0x6821             LDR      R1,[R4, #+0]
   \       0x76   0xF8C1 0x0304      STR      R0,[R1, #+772]
     66                      break;
   \       0x7A   0xE008             B.N      ??setIRQ_7
     67                  case 5:
     68                      _TIMER->INTENSET |= TIMER_INTENSET_COMPARE5_Enabled << TIMER_INTENSET_COMPARE5_Pos;
   \                     ??setIRQ_5: (+1)
   \       0x7C   0x6820             LDR      R0,[R4, #+0]
   \       0x7E   0xF8D0 0x0304      LDR      R0,[R0, #+772]
   \       0x82   0xF450 0x1000      ORRS     R0,R0,#0x200000
   \       0x86   0x6821             LDR      R1,[R4, #+0]
   \       0x88   0xF8C1 0x0304      STR      R0,[R1, #+772]
     69                      break;
   \       0x8C   0xE7FF             B.N      ??setIRQ_7
     70                  default:
     71                      break;
     72              }
     73          
     74              NVIC_SetPriority(_IRQn, priority);
   \                     ??setIRQ_6: (+1)
   \                     ??setIRQ_7: (+1)
   \       0x8E   0x0031             MOVS     R1,R6
   \       0x90   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \       0x92   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \       0x96   0x....'....        BL       _ZN30_INTERNAL_9_timer_cpp_4e19ece916NVIC_SetPriorityE9IRQn_Typej
     75              NVIC_ClearPendingIRQ(_IRQn);
   \       0x9A   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \       0x9E   0x....'....        BL       _ZN30_INTERNAL_9_timer_cpp_4e19ece920NVIC_ClearPendingIRQE9IRQn_Type
     76              NVIC_EnableIRQ(_IRQn);
   \       0xA2   0xF994 0x0004      LDRSB    R0,[R4, #+4]
   \       0xA6   0x....'....        BL       _ZN30_INTERNAL_9_timer_cpp_4e19ece914NVIC_EnableIRQE9IRQn_Type
     77          }
   \       0xAA   0xBD70             POP      {R4-R6,PC}       ;; return
     78          

   \                                 In section .text, align 2, keep-with-next
     79          void Timer::setCaptureCompare(uint8_t cc_num, uint8_t value, bool circulary)  
     80          { 
   \                     _ZN5Timer17setCaptureCompareEhhb: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
     81              switch(cc_num)
   \        0x2   0x000C             MOVS     R4,R1
   \        0x4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \        0x6   0x2C00             CMP      R4,#+0
   \        0x8   0xD008             BEQ.N    ??setCaptureCompare_0
   \        0xA   0x2C02             CMP      R4,#+2
   \        0xC   0xD012             BEQ.N    ??setCaptureCompare_1
   \        0xE   0xD30B             BCC.N    ??setCaptureCompare_2
   \       0x10   0x2C04             CMP      R4,#+4
   \       0x12   0xD01B             BEQ.N    ??setCaptureCompare_3
   \       0x14   0xD314             BCC.N    ??setCaptureCompare_4
   \       0x16   0x2C05             CMP      R4,#+5
   \       0x18   0xD01E             BEQ.N    ??setCaptureCompare_5
   \       0x1A   0xE023             B.N      ??setCaptureCompare_6
     82              {
     83                  case 0:
     84                      _TIMER->CC[0] = value;
   \                     ??setCaptureCompare_0: (+1)
   \       0x1C   0x0014             MOVS     R4,R2
   \       0x1E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x20   0x6805             LDR      R5,[R0, #+0]
   \       0x22   0xF8C5 0x4540      STR      R4,[R5, #+1344]
     85                      break;
   \       0x26   0xE01D             B.N      ??setCaptureCompare_7
     86                  case 1:
     87                      _TIMER->CC[1] = value;
   \                     ??setCaptureCompare_2: (+1)
   \       0x28   0x0014             MOVS     R4,R2
   \       0x2A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x2C   0x6805             LDR      R5,[R0, #+0]
   \       0x2E   0xF8C5 0x4544      STR      R4,[R5, #+1348]
     88                      break;
   \       0x32   0xE017             B.N      ??setCaptureCompare_7
     89                  case 2:
     90                      _TIMER->CC[2] = value;
   \                     ??setCaptureCompare_1: (+1)
   \       0x34   0x0014             MOVS     R4,R2
   \       0x36   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x38   0x6805             LDR      R5,[R0, #+0]
   \       0x3A   0xF8C5 0x4548      STR      R4,[R5, #+1352]
     91                      break;
   \       0x3E   0xE011             B.N      ??setCaptureCompare_7
     92                  case 3:
     93                      _TIMER->CC[3] = value;
   \                     ??setCaptureCompare_4: (+1)
   \       0x40   0x0014             MOVS     R4,R2
   \       0x42   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x44   0x6805             LDR      R5,[R0, #+0]
   \       0x46   0xF8C5 0x454C      STR      R4,[R5, #+1356]
     94                      break;
   \       0x4A   0xE00B             B.N      ??setCaptureCompare_7
     95                  case 4:
     96                      _TIMER->CC[4] = value;
   \                     ??setCaptureCompare_3: (+1)
   \       0x4C   0x0014             MOVS     R4,R2
   \       0x4E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x50   0x6805             LDR      R5,[R0, #+0]
   \       0x52   0xF8C5 0x4550      STR      R4,[R5, #+1360]
     97                      break;
   \       0x56   0xE005             B.N      ??setCaptureCompare_7
     98                  case 5:
     99                      _TIMER->CC[5] = value;
   \                     ??setCaptureCompare_5: (+1)
   \       0x58   0x0014             MOVS     R4,R2
   \       0x5A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x5C   0x6805             LDR      R5,[R0, #+0]
   \       0x5E   0xF8C5 0x4554      STR      R4,[R5, #+1364]
    100                      break;
   \       0x62   0xE7FF             B.N      ??setCaptureCompare_7
    101                  default:
    102                      break;
    103              }
    104          
    105              if(circulary)
   \                     ??setCaptureCompare_6: (+1)
   \                     ??setCaptureCompare_7: (+1)
   \       0x64   0x001C             MOVS     R4,R3
   \       0x66   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x68   0x2C00             CMP      R4,#+0
   \       0x6A   0xD02A             BEQ.N    ??setCaptureCompare_8
    106              {
    107                  switch(cc_num)
   \       0x6C   0x000C             MOVS     R4,R1
   \       0x6E   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x70   0x2C00             CMP      R4,#+0
   \       0x72   0xD008             BEQ.N    ??setCaptureCompare_9
   \       0x74   0x2C02             CMP      R4,#+2
   \       0x76   0xD010             BEQ.N    ??setCaptureCompare_10
   \       0x78   0xD30A             BCC.N    ??setCaptureCompare_11
   \       0x7A   0x2C04             CMP      R4,#+4
   \       0x7C   0xD017             BEQ.N    ??setCaptureCompare_12
   \       0x7E   0xD311             BCC.N    ??setCaptureCompare_13
   \       0x80   0x2C05             CMP      R4,#+5
   \       0x82   0xD019             BEQ.N    ??setCaptureCompare_14
   \       0x84   0xE01D             B.N      ??setCaptureCompare_15
    108                  {
    109                      case 0:
    110                           _TIMER->SHORTS = TIMER_SHORTS_COMPARE0_CLEAR_Enabled << TIMER_SHORTS_COMPARE0_CLEAR_Pos;
   \                     ??setCaptureCompare_9: (+1)
   \       0x86   0x2401             MOVS     R4,#+1
   \       0x88   0x6805             LDR      R5,[R0, #+0]
   \       0x8A   0xF8C5 0x4200      STR      R4,[R5, #+512]
    111                          break;
   \       0x8E   0xE018             B.N      ??setCaptureCompare_8
    112                      case 1:
    113                           _TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Enabled << TIMER_SHORTS_COMPARE1_CLEAR_Pos;
   \                     ??setCaptureCompare_11: (+1)
   \       0x90   0x2402             MOVS     R4,#+2
   \       0x92   0x6805             LDR      R5,[R0, #+0]
   \       0x94   0xF8C5 0x4200      STR      R4,[R5, #+512]
    114                          break;
   \       0x98   0xE013             B.N      ??setCaptureCompare_8
    115                      case 2:
    116                           _TIMER->SHORTS = TIMER_SHORTS_COMPARE2_CLEAR_Enabled << TIMER_SHORTS_COMPARE2_CLEAR_Pos;
   \                     ??setCaptureCompare_10: (+1)
   \       0x9A   0x2404             MOVS     R4,#+4
   \       0x9C   0x6805             LDR      R5,[R0, #+0]
   \       0x9E   0xF8C5 0x4200      STR      R4,[R5, #+512]
    117                          break;
   \       0xA2   0xE00E             B.N      ??setCaptureCompare_8
    118                      case 3:
    119                           _TIMER->SHORTS = TIMER_SHORTS_COMPARE3_CLEAR_Enabled << TIMER_SHORTS_COMPARE3_CLEAR_Pos;
   \                     ??setCaptureCompare_13: (+1)
   \       0xA4   0x2408             MOVS     R4,#+8
   \       0xA6   0x6805             LDR      R5,[R0, #+0]
   \       0xA8   0xF8C5 0x4200      STR      R4,[R5, #+512]
    120                          break;
   \       0xAC   0xE009             B.N      ??setCaptureCompare_8
    121                      case 4:
    122                           _TIMER->SHORTS = TIMER_SHORTS_COMPARE4_CLEAR_Enabled << TIMER_SHORTS_COMPARE4_CLEAR_Pos;
   \                     ??setCaptureCompare_12: (+1)
   \       0xAE   0x2410             MOVS     R4,#+16
   \       0xB0   0x6805             LDR      R5,[R0, #+0]
   \       0xB2   0xF8C5 0x4200      STR      R4,[R5, #+512]
    123                          break;
   \       0xB6   0xE004             B.N      ??setCaptureCompare_8
    124                      case 5:
    125                           _TIMER->SHORTS = TIMER_SHORTS_COMPARE5_CLEAR_Enabled << TIMER_SHORTS_COMPARE5_CLEAR_Pos;
   \                     ??setCaptureCompare_14: (+1)
   \       0xB8   0x2420             MOVS     R4,#+32
   \       0xBA   0x6805             LDR      R5,[R0, #+0]
   \       0xBC   0xF8C5 0x4200      STR      R4,[R5, #+512]
    126                          break;
   \       0xC0   0xE7FF             B.N      ??setCaptureCompare_8
    127                      default:
    128                          break;
    129                  }      
    130              }
    131             
    132          }
   \                     ??setCaptureCompare_15: (+1)
   \                     ??setCaptureCompare_8: (+1)
   \       0xC2   0xBC30             POP      {R4,R5}
   \       0xC4   0x4770             BX       LR               ;; return
    133          

   \                                 In section .text, align 2, keep-with-next
    134          void   Timer::increment(uint32_t dT)
    135          {
   \                     _ZN5Timer9incrementEj: (+1)
   \        0x0   0xB430             PUSH     {R4,R5}
    136              __disable_interrupt();
   \        0x2   0xB672             CPSID    I
    137          
    138              _time += dT;
   \        0x4   0xE9D0 0x4504      LDRD     R4,R5,[R0, #+16]
   \        0x8   0x000A             MOVS     R2,R1
   \        0xA   0x2300             MOVS     R3,#+0
   \        0xC   0x18A2             ADDS     R2,R4,R2
   \        0xE   0x416B             ADCS     R3,R5,R3
   \       0x10   0xE9C0 0x2304      STRD     R2,R3,[R0, #+16]
    139          
    140              __enable_interrupt();  
   \       0x14   0xB662             CPSIE    I
    141          }
   \       0x16   0xBC30             POP      {R4,R5}
   \       0x18   0x4770             BX       LR               ;; return
    142          

   \                                 In section .text, align 2, keep-with-next
    143          uint64_t   Timer::get_ms(void) const
    144          {
   \                     _ZNK5Timer6get_msEv: (+1)
   \        0x0   0x0002             MOVS     R2,R0
    145              uint64_t res;
    146              
    147              __disable_interrupt();
   \        0x2   0xB672             CPSID    I
    148              res = _time;
   \        0x4   0xE9D2 0x0104      LDRD     R0,R1,[R2, #+16]
    149              __enable_interrupt();
   \        0x8   0xB662             CPSIE    I
    150              
    151              return res; 
   \        0xA   0x4770             BX       LR               ;; return
    152          }
    153          
    154          

   \                                 In section .text, align 2, keep-with-next
    155          void Timer::delay_ms(uint32_t ms)
    156          {
   \                     _ZN5Timer8delay_msEj: (+1)
   \        0x0   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \        0x4   0x4680             MOV      R8,R0
   \        0x6   0x000E             MOVS     R6,R1
    157              uint64_t time = get_ms();
   \        0x8   0x4640             MOV      R0,R8
   \        0xA   0x....'....        BL       _ZNK5Timer6get_msEv
    158              
    159              time += (uint64_t)ms;
   \        0xE   0x2700             MOVS     R7,#+0
   \       0x10   0x1984             ADDS     R4,R0,R6
   \       0x12   0xEB51 0x0507      ADCS     R5,R1,R7
    160              
    161              do 
    162              {
    163                  __WFI();
   \                     ??delay_ms_0: (+1)
   \       0x16   0xBF30             WFI      
    164                  WATCHDOGRESET;
   \       0x18   0x....             LDR.N    R0,??DataTable8_10  ;; 0x6e524635
   \       0x1A   0x....             LDR.N    R1,??DataTable8_11  ;; 0x40010600
   \       0x1C   0x6008             STR      R0,[R1, #+0]
    165              }while (time > get_ms());
   \       0x1E   0x4640             MOV      R0,R8
   \       0x20   0x....'....        BL       _ZNK5Timer6get_msEv
   \       0x24   0x42A9             CMP      R1,R5
   \       0x26   0xD3F6             BCC.N    ??delay_ms_0
   \       0x28   0xD801             BHI.N    ??delay_ms_1
   \       0x2A   0x42A0             CMP      R0,R4
   \       0x2C   0xD3F3             BCC.N    ??delay_ms_0
    166          }
   \                     ??delay_ms_1: (+1)
   \       0x2E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    167          
    168          #pragma optimize=none

   \                                 In section .text, align 2, keep-with-next
    169          void Timer::delay_us(uint32_t us)
    170          {
   \                     _ZN5Timer8delay_usEj: (+1)
   \        0x0   0xB081             SUB      SP,SP,#+4
    171          	for(; us; us--)
   \                     ??delay_us_0: (+1)
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD00A             BEQ.N    ??delay_us_1
    172          		for(volatile uint32_t j = DELAY_1US; j; j--);
   \        0x6   0x2204             MOVS     R2,#+4
   \        0x8   0x9200             STR      R2,[SP, #+0]
   \                     ??delay_us_2: (+1)
   \        0xA   0x9A00             LDR      R2,[SP, #+0]
   \        0xC   0x2A00             CMP      R2,#+0
   \        0xE   0xD003             BEQ.N    ??delay_us_3
   \       0x10   0x9A00             LDR      R2,[SP, #+0]
   \       0x12   0x1E52             SUBS     R2,R2,#+1
   \       0x14   0x9200             STR      R2,[SP, #+0]
   \       0x16   0xE7F8             B.N      ??delay_us_2
   \                     ??delay_us_3: (+1)
   \       0x18   0x1E49             SUBS     R1,R1,#+1
   \       0x1A   0xE7F2             B.N      ??delay_us_0
    173          }
   \                     ??delay_us_1: (+1)
   \       0x1C   0xB001             ADD      SP,SP,#+4
   \       0x1E   0x4770             BX       LR               ;; return
    174          

   \                                 In section .text, align 2, keep-with-next
    175          uint64_t   Timer::get_us(void)
    176          {
   \                     _ZN5Timer6get_usEv: (+1)
   \        0x0   0xE92D 0x03F0      PUSH     {R4-R9}
   \        0x4   0x0002             MOVS     R2,R0
    177              uint64_t res;
    178          
    179              __disable_interrupt();
   \        0x6   0xB672             CPSID    I
    180          
    181              _TIMER->TASKS_CAPTURE[0] = 0;
   \        0x8   0x2000             MOVS     R0,#+0
   \        0xA   0x6811             LDR      R1,[R2, #+0]
   \        0xC   0x6408             STR      R0,[R1, #+64]
    182              _TIMER->TASKS_CAPTURE[0] = 1;
   \        0xE   0x2001             MOVS     R0,#+1
   \       0x10   0x6811             LDR      R1,[R2, #+0]
   \       0x12   0x6408             STR      R0,[R1, #+64]
    183          
    184              res = (uint64_t)_TIMER->CC[0];
   \       0x14   0x6810             LDR      R0,[R2, #+0]
   \       0x16   0xF8D0 0x0540      LDR      R0,[R0, #+1344]
   \       0x1A   0x2100             MOVS     R1,#+0
    185          
    186              __enable_interrupt();
   \       0x1C   0xB662             CPSIE    I
    187          
    188              res += _time * 1000;
   \       0x1E   0xE9D2 0x4504      LDRD     R4,R5,[R2, #+16]
   \       0x22   0xF44F 0x767A      MOV      R6,#+1000
   \       0x26   0x2700             MOVS     R7,#+0
   \       0x28   0xFBA6 0x8904      UMULL    R8,R9,R6,R4
   \       0x2C   0xFB06 0x9905      MLA      R9,R6,R5,R9
   \       0x30   0xFB07 0x9904      MLA      R9,R7,R4,R9
   \       0x34   0xEB10 0x0008      ADDS     R0,R0,R8
   \       0x38   0xEB51 0x0109      ADCS     R1,R1,R9
    189          
    190              return res;  
   \       0x3C   0xE8BD 0x03F0      POP      {R4-R9}
   \       0x40   0x4770             BX       LR               ;; return
    191          }
    192          

   \                                 In section .text, align 2, keep-with-next
    193          void   Timer::pause()
    194          {
    195              _TIMER->TASKS_STOP = 1;
   \                     _ZN5Timer5pauseEv: (+1)
   \        0x0   0x2101             MOVS     R1,#+1
   \        0x2   0x6802             LDR      R2,[R0, #+0]
   \        0x4   0x6051             STR      R1,[R2, #+4]
    196              _TIMER->TASKS_SHUTDOWN = 1;
   \        0x6   0x2101             MOVS     R1,#+1
   \        0x8   0x6802             LDR      R2,[R0, #+0]
   \        0xA   0x6111             STR      R1,[R2, #+16]
    197          
    198              _is_paused = true;
   \        0xC   0x2101             MOVS     R1,#+1
   \        0xE   0x7601             STRB     R1,[R0, #+24]
    199          }
   \       0x10   0x4770             BX       LR               ;; return
    200          

   \                                 In section .text, align 2, keep-with-next
    201          void   Timer::resume()
    202          {
    203              if(_is_paused)
   \                     _ZN5Timer6resumeEv: (+1)
   \        0x0   0x7E01             LDRB     R1,[R0, #+24]
   \        0x2   0x2900             CMP      R1,#+0
   \        0x4   0xD004             BEQ.N    ??resume_0
    204              {
    205                  _TIMER->TASKS_START = 1;
   \        0x6   0x2101             MOVS     R1,#+1
   \        0x8   0x6802             LDR      R2,[R0, #+0]
   \        0xA   0x6011             STR      R1,[R2, #+0]
    206                  _is_paused = false;
   \        0xC   0x2100             MOVS     R1,#+0
   \        0xE   0x7601             STRB     R1,[R0, #+24]
    207              }
    208          }
   \                     ??resume_0: (+1)
   \       0x10   0x4770             BX       LR               ;; return
    209          

   \                                 In section .text, align 2, keep-with-next
    210          void   Timer::onIRQ()
    211          {
   \                     _ZN5Timer5onIRQEv: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
    212              _TIMER->EVENTS_COMPARE[0] = 0;
   \        0x4   0x2000             MOVS     R0,#+0
   \        0x6   0x6821             LDR      R1,[R4, #+0]
   \        0x8   0xF8C1 0x0140      STR      R0,[R1, #+320]
    213          
    214              if (_on_irq_callback)
   \        0xC   0x68A0             LDR      R0,[R4, #+8]
   \        0xE   0x2800             CMP      R0,#+0
   \       0x10   0xD002             BEQ.N    ??onIRQ_0
    215              {
    216                  _on_irq_callback(1);
   \       0x12   0x2001             MOVS     R0,#+1
   \       0x14   0x68A1             LDR      R1,[R4, #+8]
   \       0x16   0x4788             BLX      R1
    217              }
    218          }
   \                     ??onIRQ_0: (+1)
   \       0x18   0xBD10             POP      {R4,PC}          ;; return
    219          

   \                                 In section .text, align 2, keep-with-next
    220          void sys_timer_callback(uint32_t value)
    221          {
   \                     _Z18sys_timer_callbackj: (+1)
   \        0x0   0xB5F8             PUSH     {R3-R7,LR}
   \        0x2   0x0004             MOVS     R4,R0
    222              static  uint8_t activeLeds = 0;    
    223              static uint64_t adcTmr = 0;
    224              
    225              sys_timer.increment(value);
   \        0x4   0x....             LDR.N    R5,??DataTable8
   \        0x6   0x0021             MOVS     R1,R4
   \        0x8   0x0028             MOVS     R0,R5
   \        0xA   0x....'....        BL       _ZN5Timer9incrementEj
    226              
    227              activeLeds = led_drivers_handle();   
   \        0xE   0x....             LDR.N    R6,??DataTable8_12
   \       0x10   0x....'....        BL       _Z18led_drivers_handlev
   \       0x14   0x7030             STRB     R0,[R6, #+0]
    228              
    229              // periodically start measure task for adc
    230              if((sys_timer.get_ms() - adcTmr) > ADC_MEAS_INTERVAL)
   \       0x16   0x0028             MOVS     R0,R5
   \       0x18   0x....'....        BL       _ZNK5Timer6get_msEv
   \       0x1C   0x....             LDR.N    R7,??DataTable8_13
   \       0x1E   0xE9D7 0x2300      LDRD     R2,R3,[R7, #+0]
   \       0x22   0x1A80             SUBS     R0,R0,R2
   \       0x24   0x4199             SBCS     R1,R1,R3
   \       0x26   0xF240 0x122D      MOVW     R2,#+301
   \       0x2A   0x2300             MOVS     R3,#+0
   \       0x2C   0x4299             CMP      R1,R3
   \       0x2E   0xD30A             BCC.N    ??sys_timer_callback_0
   \       0x30   0xD801             BHI.N    ??sys_timer_callback_1
   \       0x32   0x4290             CMP      R0,R2
   \       0x34   0xD307             BCC.N    ??sys_timer_callback_0
    231              {
    232                  adcTmr = sys_timer.get_ms();
   \                     ??sys_timer_callback_1: (+1)
   \       0x36   0x0028             MOVS     R0,R5
   \       0x38   0x....'....        BL       _ZNK5Timer6get_msEv
   \       0x3C   0xE9C7 0x0100      STRD     R0,R1,[R7, #+0]
    233                  adc_unite.measure();
   \       0x40   0x....             LDR.N    R0,??DataTable8_14
   \       0x42   0x....'....        BL       _ZN3ADCILi6EE7measureEv
    234              }
    235              
    236              UNUSED(activeLeds);
   \                     ??sys_timer_callback_0: (+1)
   \       0x46   0x7830             LDRB     R0,[R6, #+0]
   \       0x48   0x7030             STRB     R0,[R6, #+0]
    237          }
   \       0x4A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .bss, align 1
   \                     `sys_timer_callback(uint32_t)::activeLeds`:
   \        0x0                      DS8 1

   \                                 In section .bss, align 8
   \                     `sys_timer_callback(uint32_t)::adcTmr`:
   \        0x0                      DS8 8
    238          

   \                                 In section .text, align 2, keep-with-next
   \   static __intrinsic __interwork __softfp void __sti__routine()
   \                     __sti__routine: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
    239          Timer sys_timer(0);
   \        0x2   0x2100             MOVS     R1,#+0
   \        0x4   0x....'....        LDR.W    R0,??DataTable8
   \        0x8   0x....'....        BL       _ZN5TimerC1Eh
   \        0xC   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .bss, align 8
   \                     sys_timer:
   \        0x0                      DS8 32
    240          

   \                                 In section .text, align 2, keep-with-next
    241          extern "C" void TIMER0_IRQHandler(){ sys_timer.onIRQ(); }
   \                     TIMER0_IRQHandler: (+1)
   \        0x0   0xB580             PUSH     {R7,LR}
   \        0x2   0x....             LDR.N    R0,??DataTable8
   \        0x4   0x....'....        BL       _ZN5Timer5onIRQEv
   \        0x8   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    242          extern "C" void TIMER1_IRQHandler(){ return; }
   \                     TIMER1_IRQHandler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    243          extern "C" void TIMER2_IRQHandler(){ return; }
   \                     TIMER2_IRQHandler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    244          extern "C" void TIMER3_IRQHandler(){ return; }
   \                     TIMER3_IRQHandler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
    245          extern "C" void TIMER4_IRQHandler(){ return; }
   \                     TIMER4_IRQHandler: (+1)
   \        0x0   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \        0x0   0x....'....        DC32     sys_timer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \        0x0   0xE000'E100        DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \        0x0   0xE000'E280        DC32     0xe000e280

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \        0x0   0xE000'ED18        DC32     0xe000ed18

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \        0x0   0xE000'E400        DC32     0xe000e400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \        0x0   0x4000'8000        DC32     0x40008000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \        0x0   0x4000'9000        DC32     0x40009000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \        0x0   0x4000'A000        DC32     0x4000a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \        0x0   0x4001'A000        DC32     0x4001a000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \        0x0   0x4001'B000        DC32     0x4001b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \        0x0   0x6E52'4635        DC32     0x6e524635

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \        0x0   0x4001'0600        DC32     0x40010600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \        0x0   0x....'....        DC32     `sys_timer_callback(uint32_t)::activeLeds`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \        0x0   0x....'....        DC32     `sys_timer_callback(uint32_t)::adcTmr`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \        0x0   0x....'....        DC32     adc_unite

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   ADC<6>::enable()
       8   ADC<6>::init()
         8   -> ADC<6>::enable()
         8   -> ADC<6>::setConvertionEND_IRQ(uint8_t)
         8   -> Timer::delay_us(uint32_t)
       8   ADC<6>::measure()
         8   -> ADC<6>::init()
      16   ADC<6>::setConvertionEND_IRQ(uint8_t)
        16   -> NVIC_ClearPendingIRQ(IRQn_Type)
        16   -> NVIC_EnableIRQ(IRQn_Type)
        16   -> NVIC_SetPriority(IRQn_Type, uint32_t)
       0   NVIC_ClearPendingIRQ(IRQn_Type)
       0   NVIC_EnableIRQ(IRQn_Type)
       4   NVIC_SetPriority(IRQn_Type, uint32_t)
       8   TIMER0_IRQHandler
         8   -> Timer::onIRQ()
       0   TIMER1_IRQHandler
       0   TIMER2_IRQHandler
       0   TIMER3_IRQHandler
       0   TIMER4_IRQHandler
       0   Timer::Timer(uint8_t)
      24   Timer::delay_ms(uint32_t)
        24   -> Timer::get_ms() const
       4   Timer::delay_us(uint32_t)
       0   Timer::get_ms() const
      24   Timer::get_us()
       8   Timer::increment(uint32_t)
      24   Timer::init(uint32_t, uint32_t, bool)
        24   -> Timer::resume()
        24   -> Timer::setCaptureCompare(uint8_t, uint8_t, bool)
       8   Timer::onIRQ()
         8   -- Indirect call
       0   Timer::pause()
       0   Timer::resume()
       8   Timer::setCaptureCompare(uint8_t, uint8_t, bool)
      16   Timer::setIRQ(uint8_t, uint8_t)
        16   -> NVIC_ClearPendingIRQ(IRQn_Type)
        16   -> NVIC_EnableIRQ(IRQn_Type)
        16   -> NVIC_SetPriority(IRQn_Type, uint32_t)
       8   Timer::subobject Timer(uint8_t)
         8   -> Timer::Timer(uint8_t)
       8   __sti__routine()
         8   -> Timer::Timer(uint8_t)
      24   sys_timer_callback(uint32_t)
        24   -> ADC<6>::measure()
        24   -> Timer::get_ms() const
        24   -> Timer::increment(uint32_t)
        24   -> led_drivers_handle()


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      12  ADC<6>::enable()
     216  ADC<6>::init()
      48  ADC<6>::measure()
      84  ADC<6>::setConvertionEND_IRQ(uint8_t)
      24  NVIC_ClearPendingIRQ(IRQn_Type)
      24  NVIC_EnableIRQ(IRQn_Type)
      48  NVIC_SetPriority(IRQn_Type, uint32_t)
      10  TIMER0_IRQHandler
       2  TIMER1_IRQHandler
       2  TIMER2_IRQHandler
       2  TIMER3_IRQHandler
       2  TIMER4_IRQHandler
     104  Timer::Timer(uint8_t)
      50  Timer::delay_ms(uint32_t)
      32  Timer::delay_us(uint32_t)
      12  Timer::get_ms() const
      66  Timer::get_us()
      26  Timer::increment(uint32_t)
      56  Timer::init(uint32_t, uint32_t, bool)
      26  Timer::onIRQ()
      18  Timer::pause()
      18  Timer::resume()
     198  Timer::setCaptureCompare(uint8_t, uint8_t, bool)
     172  Timer::setIRQ(uint8_t, uint8_t)
      14  Timer::subobject Timer(uint8_t)
      14  __sti__routine()
       1  activeLeds
       8  adcTmr
      32  sys_timer
      76  sys_timer_callback(uint32_t)
       4  -- Other

 
    41 bytes in section .bss
     4 bytes in section .init_array
 1'416 bytes in section .text
 
 1'060 bytes of CODE memory (+ 360 bytes shared)
    41 bytes of DATA memory

Errors: none
Warnings: none
