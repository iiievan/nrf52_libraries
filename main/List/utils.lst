###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         02/Feb/2021  18:19:54
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =  E:\cpp\nrf52_libraries\utils\utils.c
#    Command line =
#        -f C:\Users\IF385~1.SHO\AppData\Local\Temp\EW3B95.tmp
#        (E:\cpp\nrf52_libraries\utils\utils.c -D NRF52840_XXAA -D
#        CONFIG_NFCT_PINS_AS_GPIOS -D _AUDIOGUDE_V2_BOARD -D DEBUG -lCN
#        E:\cpp\nrf52_libraries\main\List -lA E:\cpp\nrf52_libraries\main\List
#        -o E:\cpp\nrf52_libraries\main\Obj --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M4 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Full.h" -I E:\cpp\nrf52_libraries\fsm\ -I
#        E:\cpp\nrf52_libraries\pwm\ -I E:\cpp\nrf52_libraries\spi\ -I
#        E:\cpp\nrf52_libraries\usb\ -I E:\cpp\nrf52_libraries\main\ -I
#        E:\cpp\nrf52_libraries\cmsis\ -I E:\cpp\nrf52_libraries\cmsis\device\
#        -I E:\cpp\nrf52_libraries\cmsis\include\ -I
#        E:\cpp\nrf52_libraries\board\ -I E:\cpp\nrf52_libraries\utils\ -I
#        E:\cpp\nrf52_libraries\timer\ -On --c++ --no_exceptions --no_rtti)
#    Locale       =  C
#    List file    =  E:\cpp\nrf52_libraries\main\List\utils.lst
#    Object file  =  E:\cpp\nrf52_libraries\main\Obj\utils.o
#
###############################################################################

E:\cpp\nrf52_libraries\utils\utils.c
      1          #include "utils.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp NRF_GPIO_Type *nrf_gpio_pin_port_decode(uint32_t *)
   \                     _ZN28_INTERNAL_7_utils_c_731edefb24nrf_gpio_pin_port_decodeEPj: (+1)
   \        0x0   0x0001             MOVS     R1,R0
   \        0x2   0x6808             LDR      R0,[R1, #+0]
   \        0x4   0x2820             CMP      R0,#+32
   \        0x6   0xD202             BCS.N    ??nrf_gpio_pin_port_decode_0
   \        0x8   0xF05F 0x40A0      MOVS     R0,#+1342177280
   \        0xC   0xE004             B.N      ??nrf_gpio_pin_port_decode_1
   \                     ??nrf_gpio_pin_port_decode_0: (+1)
   \        0xE   0x7808             LDRB     R0,[R1, #+0]
   \       0x10   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \       0x14   0x6008             STR      R0,[R1, #+0]
   \       0x16   0x....             LDR.N    R0,??DataTable2  ;; 0x50000300
   \                     ??nrf_gpio_pin_port_decode_1: (+1)
   \       0x18   0x4770             BX       LR               ;; return
      2          

   \                                 In section .data, align 4
      3          static unsigned long int _next = 1;
   \                     _next:
   \        0x0   0x0000'0001        DC32 1
      4          

   \                                 In section .text, align 2, keep-with-next
      5          void seed_random(unsigned int seed)
      6          {
   \                     _Z11seed_randomj: (+1)
   \        0x0   0xB41F             PUSH     {R0-R4}
      7            if (seed == 0)
   \        0x2   0x2800             CMP      R0,#+0
   \        0x4   0xD127             BNE.N    ??seed_random_0
      8            {
      9              uint32_t v[4];
     10              
     11              for (uint8_t i = 0; i < 4; i++)
   \        0x6   0x2200             MOVS     R2,#+0
   \                     ??seed_random_1: (+1)
   \        0x8   0x0011             MOVS     R1,R2
   \        0xA   0xB2C9             UXTB     R1,R1            ;; ZeroExt  R1,R1,#+24,#+24
   \        0xC   0x2904             CMP      R1,#+4
   \        0xE   0xDA11             BGE.N    ??seed_random_2
     12              {
     13                NRF_RNG->EVENTS_VALRDY = 0;
   \       0x10   0x....             LDR.N    R3,??DataTable2_1  ;; 0x4000d100
   \       0x12   0x2100             MOVS     R1,#+0
   \       0x14   0x6019             STR      R1,[R3, #+0]
     14                NRF_RNG->TASKS_START = 1;
   \       0x16   0x2101             MOVS     R1,#+1
   \       0x18   0x....             LDR.N    R4,??DataTable2_2  ;; 0x4000d000
   \       0x1A   0x6021             STR      R1,[R4, #+0]
     15                while (NRF_RNG->EVENTS_VALRDY == 0);
   \                     ??seed_random_3: (+1)
   \       0x1C   0x6819             LDR      R1,[R3, #+0]
   \       0x1E   0x2900             CMP      R1,#+0
   \       0x20   0xD0FC             BEQ.N    ??seed_random_3
     16                v[i] = NRF_RNG->VALUE;
   \       0x22   0x....             LDR.N    R1,??DataTable2_3  ;; 0x4000d508
   \       0x24   0x6809             LDR      R1,[R1, #+0]
   \       0x26   0x466B             MOV      R3,SP
   \       0x28   0x0014             MOVS     R4,R2
   \       0x2A   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \       0x2C   0xF843 0x1024      STR      R1,[R3, R4, LSL #+2]
     17              }
   \       0x30   0x1C52             ADDS     R2,R2,#+1
   \       0x32   0xE7E9             B.N      ??seed_random_1
     18              
     19              NRF_RNG->TASKS_STOP = 1;
   \                     ??seed_random_2: (+1)
   \       0x34   0x2101             MOVS     R1,#+1
   \       0x36   0x....             LDR.N    R2,??DataTable2_4  ;; 0x4000d004
   \       0x38   0x6011             STR      R1,[R2, #+0]
     20              
     21              _next = (v[0] << 24) | (v[1] << 16) | (v[2] << 8) | v[3];
   \       0x3A   0x4669             MOV      R1,SP
   \       0x3C   0x9A00             LDR      R2,[SP, #+0]
   \       0x3E   0x684B             LDR      R3,[R1, #+4]
   \       0x40   0x041B             LSLS     R3,R3,#+16
   \       0x42   0xEA53 0x6302      ORRS     R3,R3,R2, LSL #+24
   \       0x46   0x6889             LDR      R1,[R1, #+8]
   \       0x48   0xEA53 0x2301      ORRS     R3,R3,R1, LSL #+8
   \       0x4C   0x9903             LDR      R1,[SP, #+12]
   \       0x4E   0x430B             ORRS     R3,R1,R3
   \       0x50   0x....             LDR.N    R1,??DataTable2_5
   \       0x52   0x600B             STR      R3,[R1, #+0]
   \       0x54   0xE001             B.N      ??seed_random_4
     22            }
     23            else
     24              _next = seed;
   \                     ??seed_random_0: (+1)
   \       0x56   0x....             LDR.N    R1,??DataTable2_5
   \       0x58   0x6008             STR      R0,[R1, #+0]
     25          }
   \                     ??seed_random_4: (+1)
   \       0x5A   0xBC1F             POP      {R0-R4}
   \       0x5C   0x4770             BX       LR               ;; return
     26          

   \                                 In section .text, align 2, keep-with-next
     27          int random(void) // RAND_MAX assumed to be 32767
     28          {
     29            _next = _next * 1103515245 + 12345;
   \                     _Z6randomv: (+1)
   \        0x0   0x....             LDR.N    R1,??DataTable2_5
   \        0x2   0x680A             LDR      R2,[R1, #+0]
   \        0x4   0x....             LDR.N    R3,??DataTable2_6  ;; 0x41c64e6d
   \        0x6   0xF243 0x0039      MOVW     R0,#+12345
   \        0xA   0xFB03 0x0202      MLA      R2,R3,R2,R0
   \        0xE   0x600A             STR      R2,[R1, #+0]
     30            return (unsigned int)(_next/65536) % 32768;
   \       0x10   0x6808             LDR      R0,[R1, #+0]
   \       0x12   0xF3C0 0x400E      UBFX     R0,R0,#+16,#+15
   \       0x16   0x4770             BX       LR               ;; return
     31          }
     32          

   \                                 In section .text, align 2, keep-with-next
     33          int rnd_max(int max)
     34          {
   \                     _Z7rnd_maxi: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x0004             MOVS     R4,R0
     35            return (max*random()) / 32767;
   \        0x4   0x....'....        BL       _Z6randomv
   \        0x8   0xFB00 0xF004      MUL      R0,R0,R4
   \        0xC   0xF647 0x71FF      MOVW     R1,#+32767
   \       0x10   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \       0x14   0xBD10             POP      {R4,PC}          ;; return
     36          }
     37          

   \                                 In section .text, align 2, keep-with-next
     38          uint16_t crc16_fill( const uint8_t *pBuf, uint32_t uiLength, uint16_t fill )
     39          {
   \                     _Z10crc16_fillPKhjt: (+1)
   \        0x0   0xB4F0             PUSH     {R4-R7}
   \        0x2   0x0004             MOVS     R4,R0
     40              register uint8_t Lo, Hi, ucSym;
     41           
     42              if (!uiLength){
   \        0x4   0x2900             CMP      R1,#+0
   \        0x6   0xD101             BNE.N    ??crc16_fill_0
     43                  return 1;
   \        0x8   0x2001             MOVS     R0,#+1
   \        0xA   0xE031             B.N      ??crc16_fill_1
     44              }
     45             
     46              Lo = fill & 0xFF;
   \                     ??crc16_fill_0: (+1)
   \        0xC   0x0013             MOVS     R3,R2
     47              Hi = (fill & 0xFF00) >> 8;
   \        0xE   0x0015             MOVS     R5,R2
   \       0x10   0xB2AD             UXTH     R5,R5            ;; ZeroExt  R5,R5,#+16,#+16
   \       0x12   0x0A2D             LSRS     R5,R5,#+8
     48           
     49              do {
     50                  ucSym = *(pBuf++);
   \                     ??crc16_fill_2: (+1)
   \       0x14   0x7827             LDRB     R7,[R4, #+0]
   \       0x16   0x1C64             ADDS     R4,R4,#+1
     51                  ucSym ^= Hi;
   \       0x18   0x406F             EORS     R7,R5,R7
     52                    
     53                  Hi = ( ucSym & 0x02 ) ? (Lo - 0x80) : Lo;
   \       0x1A   0x07B8             LSLS     R0,R7,#+30
   \       0x1C   0xD502             BPL.N    ??crc16_fill_3
   \       0x1E   0xF1B3 0x0580      SUBS     R5,R3,#+128
   \       0x22   0xE000             B.N      ??crc16_fill_4
   \                     ??crc16_fill_3: (+1)
   \       0x24   0x001D             MOVS     R5,R3
     54                    
     55                  if ( ucSym & 0x01 )
   \                     ??crc16_fill_4: (+1)
   \       0x26   0x07F8             LSLS     R0,R7,#+31
   \       0x28   0xD501             BPL.N    ??crc16_fill_5
     56                      Hi ^= 0xC0;
   \       0x2A   0xF095 0x05C0      EORS     R5,R5,#0xC0
     57                    
     58                  Lo = ucSym;
   \                     ??crc16_fill_5: (+1)
   \       0x2E   0x0038             MOVS     R0,R7
     59                  Lo >>= 1;
   \       0x30   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x32   0x0840             LSRS     R0,R0,#+1
     60                  Lo ^= ucSym;
   \       0x34   0x4078             EORS     R0,R7,R0
     61                  Lo >>= 1;
   \       0x36   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x38   0x0840             LSRS     R0,R0,#+1
   \       0x3A   0x0003             MOVS     R3,R0
     62                  ucSym ^= Lo;
   \       0x3C   0x003E             MOVS     R6,R7
   \       0x3E   0x405E             EORS     R6,R3,R6
     63                    
     64                  if ( ucSym & 0x08 )
   \       0x40   0x0730             LSLS     R0,R6,#+28
   \       0x42   0xD500             BPL.N    ??crc16_fill_6
     65                      --ucSym;
   \       0x44   0x1E76             SUBS     R6,R6,#+1
     66                    
     67                  if ( ucSym & 0x40 )
   \                     ??crc16_fill_6: (+1)
   \       0x46   0x0670             LSLS     R0,R6,#+25
   \       0x48   0xD500             BPL.N    ??crc16_fill_7
     68                      --ucSym;
   \       0x4A   0x1E76             SUBS     R6,R6,#+1
     69                    
     70                  ucSym &= 0x01;
   \                     ??crc16_fill_7: (+1)
   \       0x4C   0xF016 0x0601      ANDS     R6,R6,#0x1
     71            
     72                  if ( ucSym )
   \       0x50   0x0030             MOVS     R0,R6
   \       0x52   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \       0x54   0x2800             CMP      R0,#+0
   \       0x56   0xD001             BEQ.N    ??crc16_fill_8
     73                      Lo ^= 0xC0;
   \       0x58   0xF093 0x03C0      EORS     R3,R3,#0xC0
     74            
     75                  Hi ^= ucSym;
   \                     ??crc16_fill_8: (+1)
   \       0x5C   0x4075             EORS     R5,R6,R5
     76              } while ( --uiLength );
   \       0x5E   0x1E49             SUBS     R1,R1,#+1
   \       0x60   0x2900             CMP      R1,#+0
   \       0x62   0xD1D7             BNE.N    ??crc16_fill_2
     77            
     78              return (uint16_t)((((uint16_t)Hi)<<8) | Lo);
   \       0x64   0xB2ED             UXTB     R5,R5            ;; ZeroExt  R5,R5,#+24,#+24
   \       0x66   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \       0x68   0xEA53 0x2305      ORRS     R3,R3,R5, LSL #+8
   \       0x6C   0x0018             MOVS     R0,R3
   \       0x6E   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \                     ??crc16_fill_1: (+1)
   \       0x70   0xBCF0             POP      {R4-R7}
   \       0x72   0x4770             BX       LR               ;; return
     79          }
     80          

   \                                 In section .text, align 2, keep-with-next
     81          uint16_t crc16( const uint8_t *pBuf, uint32_t uiLength )
     82          {
   \                     _Z5crc16PKhj: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x0004             MOVS     R4,R0
   \        0x4   0x000D             MOVS     R5,R1
     83              return crc16_fill(pBuf, uiLength, 0xFFFF);
   \        0x6   0xF64F 0x72FF      MOVW     R2,#+65535
   \        0xA   0x0029             MOVS     R1,R5
   \        0xC   0x0020             MOVS     R0,R4
   \        0xE   0x....'....        BL       _Z10crc16_fillPKhjt
   \       0x12   0xBD32             POP      {R1,R4,R5,PC}    ;; return
     84          }
     85          

   \                                 In section .text, align 2, keep-with-next
     86          volatile uint32_t* pincfg_reg(uint32_t pin)
     87          {
   \                     _Z10pincfg_regj: (+1)
   \        0x0   0xB501             PUSH     {R0,LR}
     88            	NRF_GPIO_Type * port = nrf_gpio_pin_port_decode(&pin);
   \        0x2   0x4668             MOV      R0,SP
   \        0x4   0x....'....        BL       _ZN28_INTERNAL_7_utils_c_731edefb24nrf_gpio_pin_port_decodeEPj
     89          
     90            	return &port->PIN_CNF[pin];
   \        0x8   0x9900             LDR      R1,[SP, #+0]
   \        0xA   0xEB00 0x0081      ADD      R0,R0,R1, LSL #+2
   \        0xE   0xF510 0x60E0      ADDS     R0,R0,#+1792
   \       0x12   0xBD02             POP      {R1,PC}          ;; return
     91          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \        0x0   0x5000'0300        DC32     0x50000300

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \        0x0   0x4000'D100        DC32     0x4000d100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \        0x0   0x4000'D000        DC32     0x4000d000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \        0x0   0x4000'D508        DC32     0x4000d508

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \        0x0   0x4000'D004        DC32     0x4000d004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \        0x0   0x....'....        DC32     _next

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \        0x0   0x41C6'4E6D        DC32     0x41c64e6d

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   crc16(uint8_t const *, uint32_t)
        16   -> crc16_fill(uint8_t const *, uint32_t, uint16_t)
      16   crc16_fill(uint8_t const *, uint32_t, uint16_t)
       0   nrf_gpio_pin_port_decode(uint32_t *)
       8   pincfg_reg(uint32_t)
         8   -> nrf_gpio_pin_port_decode(uint32_t *)
       0   random()
       8   rnd_max(int)
         8   -> random()
      20   seed_random(unsigned int)


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  _next
      20  crc16(uint8_t const *, uint32_t)
     116  crc16_fill(uint8_t const *, uint32_t, uint16_t)
      26  nrf_gpio_pin_port_decode(uint32_t *)
      20  pincfg_reg(uint32_t)
      24  random()
      22  rnd_max(int)
      94  seed_random(unsigned int)

 
   4 bytes in section .data
 350 bytes in section .text
 
 350 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
